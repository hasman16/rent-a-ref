POST /login
Payload:
{
  "email":"admin1@rentaref.com",
  "password": "admin1"
}
Returns:
{
    "success": true,
    "message": "Authorization success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiZW1haWwiOiJhZG1pbjFAcmVudGFyZWYuY29tIiwiYWNjZXNzTGV2ZWwiOjEsImZpcnN0bmFtZSI6IlJvZCIsImxhc3RuYW1lIjoiVGVzdCIsImNhbl9yZWZlcmVlIjoiYWN0aXZlIiwiY2FuX29yZ2FuaXplIjoiYWN0aXZlIiwic3RhdHVzIjoiYWN0aXZlIiwiaWF0IjoxNTAxMzQ1MTU5LCJleHAiOjE1MDE0MzE1NTl9.4V888S9cnSFneNtSJ1TMhob6copDbdJvwKMZDhHQ0RI",
    "user": {
        "id": 7,
        "email": "admin1@rentaref.com",
        "authorization": 1,
        "firstname": "Rod",
        "lastname": "Test",
        "can_referee": "active",
        "can_organize": "active",
        "status": "active"
    }
}
Note:
can_referee is always: "no","pending","active" or "suspended"
can_organize is always: "no","pending","active","suspended"
status is always: "no","pending","active","suspended"


POST /logout --- not implemented

GET /user - Get all users
Payload:
Returns:
[
    {
        "id": 1,
        "email": "org33@rentaref.com",
        "authorization": 3,
        "can_organize": "pending",
        "can_referee": "pending",
        "status": "active"
    },
    {
        "id": 2,
        "email": "admin1@rentaref.com",
        "authorization": 1,
        "can_organize": "active",
        "can_referee": "active",
        "status": "active"
    },
    {
        "id": 3,
        "email": "org11@rentaref.com",
        "authorization": 3,
        "can_organize": "active",
        "can_referee": "active",
        "status": "active"
    },
    {
        "id": 4,
        "email": "org22@rentaref.com",
        "authorization": 3,
        "can_organize": "active",
        "can_referee": "no",
        "status": "active"
    },
    {
        "id": 5,
        "email": "ref2@rentaref.com",
        "authorization": 3,
        "can_organize": "no",
        "can_referee": "active",
        "status": "active"
    },
    {
        "id": 6,
        "email": "admin2@rentaref.com",
        "authorization": 2,
        "can_organize": "active",
        "can_referee": "active",
        "status": "active"
    },
    {
        "id": 7,
        "email": "ref1@rentaref.com",
        "authorization": 3,
        "can_organize": "no",
        "can_referee": "active",
        "status": "active"
    }
]
Notes:
Only admins have permissions for this endpoint.


POST  /user - Create User
POST  /register - Alternative.
Payload:
{
  "email":"test4@rentaref.com",
  "password": "test4",
  "firstname": "lazerus",
  "lastname": "Lazerus",
  "role": organizer | referee,
  "phone": 949586124 - optional
}
Returns:
CODE: 201
{
    "success": true,
    "message": "User created successfully"
}
ERROR: 403
{
    "success": false,
    "message": "A user with that email address already exists."
}
Notes:
Does not require login. Access level is always set to 3 eg user. The admin (1)
has to go in to upgrade the new user to an assistant admin (2).

The client such as the browser has to execute the login call. The API does not
auto login the new user.


GET  /user/1 - Retrieve User
Payload:
Result:
{
    "id": 1,
    "email": "admin2@rentaref.com",
    "authorization": 2
}
Notes:
Must be the user 1 or an admin.


PUT  /user/:id - Update User

DELETE  /user/:id - Delete User -- not tested

GET /game - Get all Games
POST  /game - Create Game
GET  /game/:id - Retrieve Game
PUT  /game/:id - Update Game
DELETE  /game/:id - Delete Game

GET /organization - Get all Organizations
POST  /organization - Create Organization
GET  /organization/:id - Retrieve Organization
PUT  /organization/:id - Update Organization
DELETE  /organization/:id - Delete Organization

GET /person - Get all Persons
POST  /person - Create Person
GET  /person/:id - Retrieve Person
PUT  /person/:id - Update Person
DELETE  /person/:id - Delete Person

GET /sport - Get all Sports
POST  /sport - Create Sport
GET  /sport/:id - Retrieve Sport
PUT  /sport/:id - Update Sport
DELETE  /sport/:id - Delete Sport
