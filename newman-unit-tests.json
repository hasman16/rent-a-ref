{
	"info": {
		"_postman_id": "639d8bdd-e340-35db-5c61-695af663e59d",
		"name": "Rent-A-Ref",
		"description": "API tests for rent-a-ref website on Heroku. Will need to tests on Heroku too.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b9bcf33-d190-4ec5-b9ea-e4aba54809c2",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is admin1'] = user.authorization === 1;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "admin1@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "admin1"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as admin2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f7768e8-355f-43c8-83fc-a0cd2a66800a",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is admin2'] = user.authorization === 2;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "admin2@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "admin2"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as ref",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55cc2c57-18d9-4ede-bdc6-24bb909c3b82",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "ref1@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "referee1"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as ref2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "663f2e35-9ef2-4db0-9346-917a2741364a",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "ref2@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "referee2"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login correct username wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6d2d9f-3ea4-4c4b-89d9-034d6d0cf6dd",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Authorization failed\"'] = data.message === \"Authorization failed\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return accessLevel'] = !responseBody.has('accessLevel');",
									"tests['Expect authorization is undefined'] = data.authorization === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "xx",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login wrong username correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82f31f4c-b1cb-48b4-9323-a46210aae98b",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Unknown username or password\"'] = data.message === \"Unknown username or password\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return accessLevel'] = !responseBody.has('accessLevel');",
									"tests['Expect authorization is undefined'] = data.authorization === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "fred@mailinator.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as unknow user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9791cbf5-8486-46db-a118-97cec1124497",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Unknown username or password\"'] = data.message === \"Unknown username or password\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return user'] = !!responseBody.has('user');",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "fredflintstone@bedrock.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "fjljj",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Addresses as ref1",
			"description": "Unit tests for address CRUD endpoints for a user. The getAll call should fail, this should only work for admins.",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04fb2f1c-29ff-4992-9f82-118cc682d31d",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return accessLevel'] = !responseBody.has('accessLevel');",
									"tests['Expect accessLevel is undefined'] = data.accessLevel === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns a user id'] = responseBody.has('id');",
									"tests['Returns an email'] = responseBody.has('email');",
									"tests['Doe not return password'] = responseBody.has('password') === false;",
									"tests['Returns address as an array'] = data.addresses instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns a user_id'] = responseBody.has('user_id');",
									"tests['Returns a address id'] = responseBody.has('address_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user ids match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect address id to be a number'] = /\\d+/.test(item.address_id);",
									"tests['Expect address id not to zero'] = item.address_id > 0;",
									"postman.setGlobalVariable(\"addressId\", item.address_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "line1",
									"value": "255 Main St",
									"description": "",
									"type": "text"
								},
								{
									"key": "line2",
									"value": "",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/address",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns a user id'] = responseBody.has('id');",
									"tests['Returns an email'] = responseBody.has('email');",
									"tests['Doe not return password'] = responseBody.has('password') === false;",
									"tests['Returns address as an array'] = data.addresses instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"/*",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns message'] = responseBody.has('message');",
									"",
									"tests['Expect success to be true'] = item.success === true;",
									"tests['Expect message to be \"Address updated\"'] = item.message === \"Address updated\";",
									"*/",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "line1",
									"value": "255 Main St",
									"description": "",
									"type": "text"
								},
								{
									"key": "line2",
									"value": "",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville South",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								},
								{
									"key": "created_at",
									"value": "2017-08-07T06:04:09.699Z",
									"description": "",
									"type": "text"
								},
								{
									"key": "deleted_at",
									"value": "2017-08-07T06:04:09.699Z",
									"description": "",
									"type": "text"
								},
								{
									"key": "updated_at",
									"value": "2017-08-07T06:04:09.699Z",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses",
								"{{addressId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Addresses as admin1",
			"description": "Unit tests for address CRUD endpoints for a user. The getAll call should fail, this should only work for admins.",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aae46acf-fd8a-45df-8799-7e991258bdcb",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dffdabf-48ef-46fa-ac3f-c24e2ebf1ec5",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data.addresses instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns a user_id'] = responseBody.has('user_id');",
									"tests['Returns a address id'] = responseBody.has('address_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user ids match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect address id to be a number'] = /\\d+/.test(item.address_id);",
									"tests['Expect address id not to zero'] = item.address_id > 0;",
									"postman.setGlobalVariable(\"addressId\", item.address_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "line1",
									"value": "255 Main St",
									"description": "",
									"type": "text"
								},
								{
									"key": "line2",
									"value": "",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebb1d84a-1f41-4899-acec-9be76583109d",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data.addresses instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0321633d-e768-4708-892a-83eb07033573",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"/*tests['Returns success'] = responseBody.has('success');",
									"tests['Returns message'] = responseBody.has('message');",
									"",
									"tests['Expect success to be true'] = item.success === true;",
									"tests['Expect message to be \"Address updated\"'] = item.message === \"Address updated\";",
									"",
									"*/"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "line1",
									"value": "255 Main St",
									"description": "",
									"type": "text"
								},
								{
									"key": "line2",
									"value": "",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville South",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/addresses/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"addresses",
								"{{addressId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Blog as ref",
			"description": "Unit tests for address CRUD endpoints for a user. The getAll call should fail, this should only work for admins.",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b4c4204-b251-401d-b8c2-9c2d36ed87c3",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Returns id'] = responseBody.has('count');",
									"tests['Returns email'] = responseBody.has('rows');",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "admin2@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "admin2"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09eff6b7-7913-43e3-9550-8487e7ef3dd4",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns a user_id'] = responseBody.has('user_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user ids match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "content",
									"value": "Crazy ramblings of a lunatic.",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fdbb53d-2b01-4dcd-b312-e2c1f6966f7d",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"/*",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns email'] = responseBody.has('email');",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns email'] = responseBody.has('email');",
									"tests['Returns status'] = responseBody.has('status');",
									"tests['Returns posts'] = responseBody.has('posts');",
									"",
									"tests['Returned posts is not empty'] = data.posts.length > 0;",
									"postman.setGlobalVariable(\"postId\", data.posts[0].id);",
									"*/"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/posts/:post_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "824ef02f-1314-4b2b-be88-ded921219627",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "content",
									"value": "Mary had a little lamb.",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/posts/{{postId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebfa5b96-d334-4865-977c-9d7cbc236877",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"/*tests['Returned posts is not empty'] = data.length > 0;",
									"var post = data[0];",
									"tests['Returns id'] = post.id > 0;",
									"tests['Returns contents'] = typeof post.content == \"string\";",
									"tests['Returns user id'] = post.user_id > 0;",
									"*/",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations as Admin1",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ef94982-6310-4a19-b621-a88fc9ab8102",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect accessLevel is administrator'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Test Organization",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94468629-4623-458e-bc82-ad0cad814677",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data instanceof Array === true;",
									"var org = data[0];",
									"tests['Organization has id'] = org.id > 0;",
									"tests['Organization has a name'] = org.name.length > 0;",
									"tests['Organization has a user_id'] = org.user_id > 0;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect id is return return correctly'] = item.id == postman.getGlobalVariable(\"organizationId\");",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8559c48f-1fef-42d4-a472-0a48824be8e7",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"",
									"tests['Expect name to be non empty streing'] = item.name.length > 0;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa0c13a-5094-4dc7-ba93-ebedc7c15579",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('organization_id');",
									"tests['Returns a name'] = responseBody.has('phone_id');",
									"",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.organization_id);",
									"tests['Expect phone id to be a number'] = /\\d+/.test(item.phone_id);",
									"postman.setGlobalVariable(\"phoneId\", item.phone_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc4f1c70-84c6-4f10-a3e2-9e1631ecf25f",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"",
									"",
									"tests['Returns data'] = data instanceof Array === true;",
									"var org = data[0];",
									"var phone = org.phones[0];",
									"tests['phone has id'] = phone.id > 0;",
									"tests['phone has a number'] = phone[\"number\"].length > 0;",
									"tests['phone has a description'] = /^(mobile|home|work|other)$/.test(phone.description) === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"phones"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations as ref1",
			"description": "",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caea7930-68ac-4754-833f-3138ef21b594",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect accessLevel is administrator'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55e941a4-5852-4776-a6a3-a9c22990cf13",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Test Organization",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Returns id'] = responseBody.has('count');",
									"tests['Returns email'] = responseBody.has('rows');",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "admin2@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "admin2"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect id is return return correctly'] = item.id == postman.getGlobalVariable(\"organizationId\");",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc71be0d-7e03-4609-ad9f-45d7abb98e0c",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('organization_id');",
									"tests['Returns a name'] = responseBody.has('phone_id');",
									"",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.organization_id);",
									"tests['Expect phone id to be a number'] = /\\d+/.test(item.phone_id);",
									"postman.setGlobalVariable(\"phoneId\", item.phone_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/phones/bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfcee988-7ec6-41df-ac68-a5be27a7eac3",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Returns data'] = data instanceof Array === true;",
									"var phone = data[0];",
									"tests['phone has id'] = phone.id > 0;",
									"tests['phone has a number'] = phone[\"number\"].length > 0;",
									"tests['phone has a description'] = /^(mobile|home|work|other)$/.test(phone.description) === true;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"phones\": [\n  {\n  \"number\": \"9495558888\",\n  \"description\": \"mobile\"\n  },\n  {\n  \"number\": \"9498885555\",\n  \"description\": \"home\"\n  }\n ]\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/phones/bulk",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"phones",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bb2d84c-cf41-4a40-af59-e07a1581cba7",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"",
									"",
									"tests['Returns data'] = data instanceof Array === true;",
									"var org = data[0];",
									"var phone = org.phones[0];",
									"tests['phone has id'] = phone.id > 0;",
									"tests['phone has a number'] = phone[\"number\"].length > 0;",
									"tests['phone has a description'] = /^(mobile|home|work|other)$/.test(phone.description) === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ad4014-577a-4668-8ac6-a68c960bcc20",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns a organization_id'] = responseBody.has('organization_id');",
									"tests['Returns a address id'] = responseBody.has('address_id');",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "line1",
									"value": "255 Main St",
									"description": "",
									"type": "text"
								},
								{
									"key": "line2",
									"value": "",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/addresses/bulk",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa6fa29-f002-4a55-9bb4-83784c56baa1",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Returns data'] = data instanceof Array === true;",
									"var address = data[0];",
									"tests['address has id'] = address.id > 0;",
									"tests['address has a line1'] = address.line1.length > 0;",
									"tests['address has a line2'] = address.line2.length >= 0;",
									"tests['address has a city'] = address.city.length > 0;",
									"tests['address has a state'] = address.state.length > 0;",
									"tests['address has a zipcode'] = /^\\d{5}(\\-\\d{4})?$/.test(address.zip) === true;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"addresses\": [\n  {\n  \"line1\": \"55 Main St\",\n  \"line2\": \"\",\n  \"city\": \"Orange\",\n  \"state\": \"CA\",\n  \"zip\": 92688\n  },\n    {\n  \"line1\": \"110 Main\",\n  \"line2\": \"Apt 1B\",\n  \"city\": \"Orange\",\n  \"state\": \"CA\",\n  \"zip\": 92688\n  }\n ]\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/addresses/bulk",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"addresses",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id/addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a18fed8-0e7e-44af-8339-ea0e1e3b402c",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"",
									"",
									"tests['Returns data'] = data instanceof Array === true;",
									"var org = data[0];",
									"var address = org.addresses[0];",
									"tests['address has id'] = address.id > 0;",
									"tests['address has a line1'] = address.line1.length > 0;",
									"tests['address has a line2'] = address.line2.length >= 0;",
									"tests['address has a city'] = address.city.length > 0;",
									"tests['address has a state'] = address.state.length > 0;",
									"tests['address has a zipcode'] = /^\\d{5}(\\-\\d{4})?$/.test(address.zip) === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}/addresses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}",
								"addresses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Game as Admin1",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1595d848-e653-4ffb-94a0-683d60f1249c",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is administrator'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44c51f20-809b-4d7b-b5ec-64b13d0659fe",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Test Organization",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01bee861-454b-4874-86bf-40d3263e5d2b",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"postman.setGlobalVariable(\"gameId\", item.id);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_name\": \"Junior Special\",\n\t\"duration\": 80,\n\t\"age\":\"kids\",\n\t\"referees\": 5,\n\t\"event_date\": 9823456798,\n\t\"event_type\": \"league\",\n\t\"venue_name\":\"Maracana\",\n\t\"pay\": 50\n }"
						},
						"url": {
							"raw": "localhost:3000/api/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organization/:id/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af9dd175-eb2b-4de5-a14d-d7f6797bc574",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a event_name'] = responseBody.has('event_name');",
									"tests['Returns a venue_name'] = responseBody.has('venue_name');",
									"",
									"tests['Expect game id to be a number'] = /\\d+/.test(item.id);",
									"//tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"gameId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_name\": \"Junior Special\",\n  \"event_date\": 1284102000000,\n  \"event_type\": \"oneoff\",\n  \"venue_name\": \"Junior High School\",\n  \"kids_referees\": 5,\n  \"teens_referees\": 10,\n  \"adults_referees\": 15,\n  \"kids_refs_pay\": 100,\n  \"teens_refs_pay\": 110,\n  \"adults_refs_pay\": 120,\n  \"sport_id\": 1,\n  \"address\": {\n    \"line1\":\"crap\",\n    \"line2\": \"xxxxxpp\",\n    \"city\": \"Orange\",\n    \"state\":\"CA\",\n    \"zip\": \"92888\"\n   }\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organization/{{organizationId}}/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organization",
								"{{organizationId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organization/:id/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8dbbfa8-6b61-40e5-ba48-c2e7f179fc0b",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a event_name'] = responseBody.has('event_name');",
									"tests['Returns a venue_name'] = responseBody.has('venue_name');",
									"",
									"tests['Expect game id to be a number'] = /\\d+/.test(item.id);",
									"",
									"postman.setGlobalVariable(\"gameId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_name\": \"Junior Special\",\n  \"event_date\": 1284102000000,\n  \"event_type\": \"oneoff\",\n  \"venue_name\": \"Junior High School\",\n  \"kids_referees\": 5,\n  \"teens_referees\": 10,\n  \"adults_referees\": 15,\n  \"kids_refs_pay\": 100,\n  \"teens_refs_pay\": 110,\n  \"adults_refs_pay\": 120,\n  \"sport_id\": 1,\n  \"address\": {\n    \"line1\":\"crap\",\n    \"line2\": \"xxxxxpp\",\n    \"city\": \"Orange\",\n    \"state\":\"CA\",\n    \"zip\": \"92888\"\n   },\n   \"phone\": {\n   \t\"number\":\"9497778888\",\n   \t\"description\":\"mobile\"\n   }\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organization/{{organizationId}}/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organization",
								"{{organizationId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games/:game_id/matches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abe2df04-c63c-490c-8a02-4082171d5cac",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"postman.setGlobalVariable(\"matchId\", item.id);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"match_name\":\"asdfasdfasdf\",\n\t\"match_date\":1532476800000,\n\t\"referees\":\"5\",\n\t\"venue_name\":\"sadfasdfasd\",\n\t\"status\":\"pending\",\"age\":\"adults\",\n\t\"address\":{\n\t\t\"line1\":\"fasdfasdf\",\n\t\t\"line2\":null,\n\t\t\"city\":\"asdfasd\",\n\t\t\"state\":\"AL\",\n\t\t\"zip\":\"92866\"\n\t}\n}"
						},
						"url": {
							"raw": "localhost:3000/api/games/{{gameId}}/matches",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games",
								"{{gameId}}",
								"matches"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/officiate_match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98002f52-a623-4677-94eb-63fb2e42a91f",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userId}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "match_id",
									"value": "{{matchId}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/officiate_match",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"officiate_match"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/decline_match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98002f52-a623-4677-94eb-63fb2e42a91f",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userId}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "match_id",
									"value": "{{matchId}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/decline_match",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"decline_match"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games/:game_id/matches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abe2df04-c63c-490c-8a02-4082171d5cac",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"postman.setGlobalVariable(\"matchId\", item.id);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"match_name\":\"asdfasdfasdf\",\n\t\"match_date\":1532476800000,\n\t\"referees\":\"5\",\n\t\"venue_name\":\"sadfasdfasd\",\n\t\"status\":\"pending\",\"age\":\"adults\",\n\t\"address\":{\n\t\t\"line1\":\"fasdfasdf\",\n\t\t\"line2\":null,\n\t\t\"city\":\"asdfasd\",\n\t\t\"state\":\"AL\",\n\t\t\"zip\":\"92866\"\n\t}\n}"
						},
						"url": {
							"raw": "localhost:3000/api/games/{{gameId}}/matches",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games",
								"{{gameId}}",
								"matches"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/officiate_match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98002f52-a623-4677-94eb-63fb2e42a91f",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userId}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "match_id",
									"value": "{{matchId}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/officiate_match",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"officiate_match"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/accept_match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98002f52-a623-4677-94eb-63fb2e42a91f",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "{{userId}}",
									"description": "",
									"type": "text"
								},
								{
									"key": "match_id",
									"value": "{{matchId}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/accept_match",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"accept_match"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games?search=event_name|&order=DESC&offset=0&sortby=id,event_name",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							],
							"query": [
								{
									"key": "search",
									"value": "event_name|"
								},
								{
									"key": "order",
									"value": "DESC"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "sortby",
									"value": "id,event_name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games/{{gameId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games/:game_id/matches?offset=0&limit=10&total_elements=1&total_pages=1&sortby=&order=&search=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games/{{gameId}}/matches?offset=0&limit=10&total_elements=1&total_pages=1&sortby=&order=&search=",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games",
								"{{gameId}}",
								"matches"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "total_elements",
									"value": "1"
								},
								{
									"key": "total_pages",
									"value": "1"
								},
								{
									"key": "sortby",
									"value": ""
								},
								{
									"key": "order",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organization/:id/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f6176ac-d34a-4615-b978-34a7954584ee",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a event_name'] = responseBody.has('event_name');",
									"tests['Returns a venue_name'] = responseBody.has('venue_name');",
									"",
									"tests['Expect game id to be a number'] = /\\d+/.test(item.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_name\": \"Junior Special\",\n  \"event_date\": 1284102000000,\n  \"event_type\": \"oneoff\",\n  \"venue_name\": \"Junior High School\",\n  \"kids_referees\": 5,\n  \"teens_referees\": 10,\n  \"adults_referees\": 15,\n  \"kids_refs_pay\": 100,\n  \"teens_refs_pay\": 110,\n  \"adults_refs_pay\": 120,\n  \"sport_id\": 1,\n  \"address\": {\n    \"line1\":\"crap\",\n    \"line2\": \"xxxxxpp\",\n    \"city\": \"Orange\",\n    \"state\":\"CA\",\n    \"zip\": \"92888\"\n   }\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organization/{{organizationId}}/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organization",
								"{{organizationId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/schedule_by_referee/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/schedule_by_referee/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"schedule_by_referee",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Game as ref1",
			"description": "",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0efcf4d4-0948-4f0c-8fc7-a19daad5b1e5",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is not administrator'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44c51f20-809b-4d7b-b5ec-64b13d0659fe",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"organizationId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Test Organization",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organizations/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('user_id');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/organizations/{{organizationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45be758b-7388-4c4f-ad04-9656e7a54cca",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns the duration'] = responseBody.has('duration');",
									"",
									"tests['Expect organization id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect organization name is not blank'] = item.name.length > 0;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_name\": \"Junior Special\",\n  \"event_date\": 1284102000000,\n  \"venue_name\": \"Junior High School\",\n  \"kids_referees\": 5,\n  \"teens_referees\": 10,\n  \"adults_referees\": 15,\n  \"kids_refs_pay\": 100,\n  \"teens_refs_pay\": 110,\n  \"adults_refs_pay\": 120,\n  \"sport_id\": 1,\n  \"address\": {\n    \"line1\":\"crap\",\n    \"line2\": \"xxxxxpp\",\n    \"city\": \"Orange\",\n    \"state\":\"CA\",\n    \"zip\": \"92888\"\n   }\n }"
						},
						"url": {
							"raw": "localhost:3000/api/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/organization/:id/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af9dd175-eb2b-4de5-a14d-d7f6797bc574",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a event_name'] = responseBody.has('event_name');",
									"tests['Returns a venue_name'] = responseBody.has('venue_name');",
									"",
									"tests['Expect game id to be a number'] = /\\d+/.test(item.id);",
									"//tests['Expect user_id is return return correctly'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"postman.setGlobalVariable(\"gameId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_name\": \"Junior Special\",\n\t\"event_date\": 1284102000000,\n\t\"venue_name\": \"Junior High School\",\n\t\"kids_referees\": 5,\n\t\"teens_referees\": 10,\n\t\"adults_referees\": 15,\n\t\"kids_refs_pay\": 100,\n\t\"teens_refs_pay\": 110,\n\t\"adults_refs_pay\": 120,\n\t\"sport_id\": 1,\n\t\"address\": {\n\t\t\"line1\":\"crap\",\n\t\t\"line2\": \"xxxxx\",\n\t\t\"city\": \"Orange\",\n\t\t\"state\":\"CA\",\n\t\t\"zip\": \"92888\"\n\t },\n\t \"phone\": {\n\t \t\"number\":\"9491114444\",\n\t \t\"description\":\"mobile\"\n\t }\n }"
						},
						"url": {
							"raw": "localhost:3000/api/organization/{{organizationId}}/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organization",
								"{{organizationId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/games/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d862ee3-f1f3-46ca-9319-0fe77e8694ec",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/games/{{gameId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "People as ref1",
			"description": "Unit tests for people endpoint.",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23f23e0b-1179-4660-a8c2-6bd4f923fcee",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									"postman.setGlobalVariable(\"personId\", data.user.person_id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/people",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a81037e3-2e1d-4cd0-b79e-90c19a432d7d",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return authorization'] = !responseBody.has('authorization');",
									"tests['Expect authorization is undefined'] = data.authorization === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/people",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"people"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/people/person_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce2904f8-4471-4dd0-b6b2-983e563bcb50",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns firstname'] = responseBody.has('firstname');",
									"tests['Returns lastname'] = responseBody.has('lastname');",
									"tests['Returns middlename'] = responseBody.has('middlename');",
									"tests['Returns an id'] = responseBody.has('id');",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/people/{{personId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"people",
								"{{personId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/people/person_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c767609-2323-490b-8428-0044ac21d2b7",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === true;",
									"tests['Returns a element data'] = responseBody.has('message');",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "Harold",
									"description": "",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "LLoyd",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1284102000000",
									"description": "",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "f",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/people/{{personId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"people",
								"{{personId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/people/person_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf083c97-73b2-4594-a0b2-d0000d698834",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns firstname'] = responseBody.has('firstname');",
									"tests['Returns lastname'] = responseBody.has('lastname');",
									"tests['Returns middlename'] = responseBody.has('middlename');",
									"tests['Returns an id'] = responseBody.has('id');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/people/{{personId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"people",
								"{{personId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Phones as ref1",
			"description": "Unit tests for phone CRUD endpoints for a user. The getAll call should fail, this should only work for admins.",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e1841be-cbf5-4949-9a72-f344ee36a8ee",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da1c76d6-1f8a-41d9-b570-2e1af0e625c0",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return authorization'] = !responseBody.has('authorization');",
									"tests['Expect accessLevel is undefined'] = data.accessLevel === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/phone - mobile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea766fdf-92d9-4fc3-bd93-a0bc552e565d",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('user_id');",
									"tests['Returns a name'] = responseBody.has('phone_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect phone id to be a number'] = /\\d+/.test(item.phone_id);",
									"tests['Expect phone id not to zero'] = item.phone_id > 0;",
									"postman.setGlobalVariable(\"phoneId\", item.phone_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "mobile",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/phones -home",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ba73f27-b95d-4620-92c2-93cb9af7401b",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('user_id');",
									"tests['Returns a name'] = responseBody.has('phone_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect phone id to be a number'] = /\\d+/.test(item.phone_id);",
									"tests['Expect phone id not to zero'] = item.phone_id > 0;",
									"postman.setGlobalVariable(\"phoneId\", item.phone_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "home",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/phones -other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62f40415-c1c9-4fae-ae06-725a9ab76dcb",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('user_id');",
									"tests['Returns a name'] = responseBody.has('phone_id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user id to match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect phone id to be a number'] = /\\d+/.test(item.phone_id);",
									"tests['Expect phone id not to zero'] = item.phone_id > 0;",
									"postman.setGlobalVariable(\"phoneId\", item.phone_id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "other",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/phones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e989e63d-f0f2-437a-979c-77d6aa47ff61",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data instanceof Array === true;",
									"var phone = data[0];",
									"tests['phone has id'] = phone.id > 0;",
									"tests['phone has a number'] = phone[\"number\"].length > 0;",
									"tests['phone has a description'] = /^(mobile|home|work|other)$/.test(phone.description) === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"phones"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/phones -bad type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a8c6008-0d31-4fb3-a9b0-052589797824",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 500;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"An Internal Error Occurred\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return authorization'] = !responseBody.has('authorization');",
									"tests['Expect accessLevel is undefined'] = data.accessLevel === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "number",
									"value": "9495555455",
									"description": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "dd",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/phones",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"phones"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sports as Admin1",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "594ab064-ce33-43a2-b2b5-1e8d21c13b3b",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is administrator'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c3b9a7c-8591-403c-99a8-88615851597a",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('periods');",
									"tests['Returns duration of game'] = responseBody.has('duration');",
									"tests['Returns number ofreferees'] = responseBody.has('referees');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"tests['Expect periods to be a number'] = /\\d+/.test(item.periods);",
									"tests['Expect periods to be greater than zero'] = item.periods > 0;",
									"",
									"tests['Expect duration to be a number'] = /\\d+/.test(item.duration);",
									"tests['Expect duration to be greater than zero'] = item.duration > 0;",
									"tests['Expect referees to be a number'] = /\\d+/.test(item.referees);",
									"tests['Expect referees to be greater than zero'] = item.referees > 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f32386df-4800-4bc0-8c19-3b044593c80b",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 201;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('periods');",
									"tests['Returns duration of game'] = responseBody.has('duration');",
									"tests['Returns number ofreferees'] = responseBody.has('referees');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"tests['Expect periods to be a number'] = /\\d+/.test(item.periods);",
									"tests['Expect periods to be greater than zero'] = item.periods > 0;",
									"",
									"tests['Expect duration to be a number'] = /\\d+/.test(item.duration);",
									"tests['Expect duration to be greater than zero'] = item.duration > 0;",
									"tests['Expect referees to be a number'] = /\\d+/.test(item.referees);",
									"tests['Expect referees to be greater than zero'] = item.referees > 0;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								},
								{
									"key": "periods",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "referees",
									"value": "13",
									"description": "",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "90",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('periods');",
									"tests['Returns duration of game'] = responseBody.has('duration');",
									"tests['Returns number ofreferees'] = responseBody.has('referees');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"tests['Expect periods to be a number'] = /\\d+/.test(item.periods);",
									"tests['Expect periods to be greater than zero'] = item.periods > 0;",
									"",
									"tests['Expect duration to be a number'] = /\\d+/.test(item.duration);",
									"tests['Expect duration to be greater than zero'] = item.duration > 0;",
									"tests['Expect referees to be a number'] = /\\d+/.test(item.referees);",
									"tests['Expect referees to be greater than zero'] = item.referees > 0;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								},
								{
									"key": "periods",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "referees",
									"value": "13",
									"description": "",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "90",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sports as ref1",
			"description": "",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08975c0b-0d24-48ac-8490-3eff6c0523c5",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e17ef4f6-51fd-4ce4-9bdd-798131a5adfe",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns data'] = data instanceof Array === true;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 200;",
									"tests['Returns an id'] = responseBody.has('id');",
									"tests['Returns a name'] = responseBody.has('name');",
									"tests['Returns number of periods'] = responseBody.has('periods');",
									"tests['Returns duration of game'] = responseBody.has('duration');",
									"tests['Returns number ofreferees'] = responseBody.has('referees');",
									"",
									"",
									"tests['Expect sport id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect sport to have name'] = item.name.length > 0;",
									"tests['Expect periods to be a number'] = /\\d+/.test(item.periods);",
									"tests['Expect periods to be greater than zero'] = item.periods > 0;",
									"",
									"tests['Expect duration to be a number'] = /\\d+/.test(item.duration);",
									"tests['Expect duration to be greater than zero'] = item.duration > 0;",
									"tests['Expect referees to be a number'] = /\\d+/.test(item.referees);",
									"tests['Expect referees to be greater than zero'] = item.referees > 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f5cc1f5-d7a8-4986-a599-4a31f9792616",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return accessLevel'] = !responseBody.has('accessLevel');",
									"tests['Expect accessLevel is undefined'] = data.accessLevel === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								},
								{
									"key": "periods",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "referees",
									"value": "13",
									"description": "",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "90",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/sports/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "496af8e4-5c56-479a-8fba-22f36c4302da",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 403'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success is false'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message is \"Permission Violation\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"tests['Doesnot return token'] = !responseBody.has('token');",
									"tests['Expect token to be undefined'] = data.token === undefined;",
									"tests['Does not return accessLevel'] = !responseBody.has('accessLevel');",
									"tests['Expect accessLevel is undefined'] = data.accessLevel === undefined;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Underwater basket weaving",
									"description": "",
									"type": "text"
								},
								{
									"key": "periods",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "referees",
									"value": "13",
									"description": "",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "90",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/sports/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"sports",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users as Admin1",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b37a447a-3076-4c1d-9e77-a0db6c87c85a",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is administrator'] = user.authorization === 1;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/1",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test77@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test78@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "",
									"type": "text"
								},
								{
									"key": "can_referee",
									"value": "true",
									"description": "",
									"type": "text"
								},
								{
									"key": "can_organize",
									"value": "true",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "register@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/register",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/1",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test4@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test12",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/1",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test4@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users Copy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users?search=email|a&order=DESC&offset=1&sortby=id",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "search",
									"value": "email|a"
								},
								{
									"key": "order",
									"value": "DESC"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "sortby",
									"value": "id"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users as Ref",
			"description": "",
			"item": [
				{
					"name": "login as ref ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1680e5d5-502c-45bf-896c-32e30da5acdb",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f5adc1-3611-48ba-95fa-ff53aee2c749",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 200'] = responseCode.code === 403;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === false;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Forbidden: Permission Violation.\";",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin2@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin2",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test4@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test12",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test4@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test12",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Man",
									"description": "",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "9491234567",
									"description": "",
									"type": "text"
								},
								{
									"key": "captcha",
									"value": "oooii",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/register",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test5@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test12",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test4@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1",
									"description": "",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Lazerus",
									"description": "",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "m",
									"description": "",
									"type": "text"
								},
								{
									"key": "dob",
									"value": "1758888",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Password",
			"description": "",
			"item": [
				{
					"name": "login as pete@mailinator.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "795fa8ef-3678-44d9-842e-83577f2217cd",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "pete@mailinator.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "petepete",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/changepassword/:user_id",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/changepassword/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"changepassword",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as pete@mailinator.com new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0ca7187-65b5-4c59-b4db-9df474eb80cb",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "pete@mailinator.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/forgotpassword",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "pete@mailinator.com",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/forgotpassword",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"forgotpassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/resetpassword",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "pete@mailinator.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password1",
									"value": "hello1",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "hello1",
									"description": "",
									"type": "text"
								},
								{
									"key": "passcode",
									"value": "yQC5X8jG1jprja9NLiTPVu8dJz1mOwdI",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/resetpassword",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"resetpassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as pete@mailinator.com new new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41916c6b-75c3-4045-bfaf-9863c107509f",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"administratorToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "pete@mailinator.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/changepassword/:user_id",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "petepete",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "petepete",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/changepassword/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"changepassword",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"description": "",
			"item": [
				{
					"name": "login as ref1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9809a93-95cc-44a1-a045-a6674f9c6889",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is user'] = user.authorization === 3;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "ref1@rentaref.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "referee1",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/profile/:user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 200;",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns id'] = responseBody.has('email');",
									"tests['Returns person'] = responseBody.has('person');",
									"tests['Returns addresses'] = responseBody.has('addresses');",
									"tests['Returns phones'] = responseBody.has('phones');",
									"",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(data.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(data.can_organize);",
									"",
									"",
									"var person = data.person;",
									"",
									"tests['Expect firstname to be a string'] = /\\w+/.test(person.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(person.lastname);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/profile/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"profile",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/location_preference",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns a user_id'] = responseBody.has('user_id');",
									"tests['Returns a address id'] = responseBody.has('id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user ids match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect address id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect address id not to zero'] = item.id > 0;",
									"postman.setGlobalVariable(\"areaId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "radius",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/location_preference",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"location_preference"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/profile/:user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 200;",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns id'] = responseBody.has('email');",
									"tests['Returns person'] = responseBody.has('person');",
									"tests['Returns addresses'] = responseBody.has('addresses');",
									"tests['Returns phones'] = responseBody.has('phones');",
									"",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(data.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(data.can_organize);",
									"",
									"",
									"var person = data.person;",
									"",
									"tests['Expect firstname to be a string'] = /\\w+/.test(person.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(person.lastname);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/profile/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"profile",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/user_id/location_preference/:area_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24a0f502-d69e-4834-85d5-d1eafaf44b8c",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"//tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "radius",
									"value": "55",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville North",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/location_preference/{{areaId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"location_preference",
								"{{areaId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stripe",
			"description": "",
			"item": [
				{
					"name": "login as admin1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b9bcf33-d190-4ec5-b9ea-e4aba54809c2",
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns success'] = responseBody.has('success');",
									"tests['Returns success as true'] = data.success === true;",
									"tests['Returns message'] = responseBody.has('message');",
									"tests['Returns message as \"Authorization success\"'] = data.message === \"Authorization success\";",
									"tests['Returns token'] = responseBody.has('token');",
									"tests['Expect token to be defined'] = /[a-z0-9\\-_]+\\.[a-z0-9\\-_]+\\.[a-z0-9\\-_]+/i.test(data.token);",
									"tests['Returns basic user info'] = responseBody.has('user');",
									"var user = data.user;",
									"tests['Expect user id to be a number'] = /\\d+/.test(user.id);",
									"tests['Expect authorization is admin1'] = user.authorization === 1;",
									"tests['Doe not return password'] = user.password === undefined;",
									"tests['Expect firstname to be a string'] = /\\w+/.test(user.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(user.lastname);",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(user.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(user.can_organize);",
									"tests['Expect status to be a string'] = /\\w+/.test(user.status);",
									"",
									"postman.setGlobalVariable(\"authoriztionToken\", 'Bearer ' + data.token);",
									"postman.setGlobalVariable(\"userId\", data.user.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "admin1@rentaref.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "admin1"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/stripe/products",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 200;",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns id'] = responseBody.has('email');",
									"tests['Returns person'] = responseBody.has('person');",
									"tests['Returns addresses'] = responseBody.has('addresses');",
									"tests['Returns phones'] = responseBody.has('phones');",
									"",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(data.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(data.can_organize);",
									"",
									"",
									"var person = data.person;",
									"",
									"tests['Expect firstname to be a string'] = /\\w+/.test(person.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(person.lastname);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/stripe/products",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"stripe",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/stripe/plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 200;",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns id'] = responseBody.has('email');",
									"tests['Returns person'] = responseBody.has('person');",
									"tests['Returns addresses'] = responseBody.has('addresses');",
									"tests['Returns phones'] = responseBody.has('phones');",
									"",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(data.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(data.can_organize);",
									"",
									"",
									"var person = data.person;",
									"",
									"tests['Expect firstname to be a string'] = /\\w+/.test(person.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(person.lastname);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/stripe/plans",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"stripe",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/:id/location_preference",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 201;",
									"tests['Returns a user_id'] = responseBody.has('user_id');",
									"tests['Returns a address id'] = responseBody.has('id');",
									"",
									"",
									"tests['Expect user id to be a number'] = /\\d+/.test(item.user_id);",
									"tests['Expect user id not to be zero'] = item.user_id > 0;",
									"tests['Expect user ids match'] = item.user_id == postman.getGlobalVariable(\"userId\");",
									"",
									"tests['Expect address id to be a number'] = /\\d+/.test(item.id);",
									"tests['Expect address id not to zero'] = item.id > 0;",
									"postman.setGlobalVariable(\"areaId\", item.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "radius",
									"value": "5",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/location_preference",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"location_preference"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/profile/:user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"tests['Status code is 201'] = responseCode.code === 200;",
									"tests['Returns id'] = responseBody.has('id');",
									"tests['Returns id'] = responseBody.has('email');",
									"tests['Returns person'] = responseBody.has('person');",
									"tests['Returns addresses'] = responseBody.has('addresses');",
									"tests['Returns phones'] = responseBody.has('phones');",
									"",
									"tests['Expect can_referee to be a string'] = /\\w+/.test(data.can_referee);",
									"tests['Expect can_organize to be a string'] = /\\w+/.test(data.can_organize);",
									"",
									"",
									"var person = data.person;",
									"",
									"tests['Expect firstname to be a string'] = /\\w+/.test(person.firsthame);",
									"tests['Expect lastname to be a string'] = /\\w+/.test(person.lastname);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password1",
									"value": "reefer",
									"description": "",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "reefer",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/profile/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"profile",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:3000/api/users/user_id/location_preference/:area_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24a0f502-d69e-4834-85d5-d1eafaf44b8c",
								"type": "text/javascript",
								"exec": [
									"var item = JSON.parse(responseBody);",
									"//tests['Status code is 200'] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authoriztionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "radius",
									"value": "55",
									"description": "",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Metroville North",
									"description": "",
									"type": "text"
								},
								{
									"key": "state",
									"value": "CA",
									"description": "",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "92866",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/users/{{userId}}/location_preference/{{areaId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"location_preference",
								"{{areaId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}